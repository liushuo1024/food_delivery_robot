base_global_planner: "global_planner/GlobalPlanner"
#base_local_planner: "dwa_local_planner/DWAPlannerROS"
base_local_planner: "teb_local_planner/TebLocalPlannerROS"
recovery_behaviors:
  - name: 'costmap_reset_conservative'
    type: 'clear_costmap_recovery/ClearCostmapRecovery'
  - name: 'again_costmap_reset_conservative'
    type: 'clear_costmap_recovery/ClearCostmapRecovery'

# oscillation_timeout: 60.0
oscillation_distance: 0.5

# The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, the global planner will only run when a new goal is received or the local planner reports that its path is blocked.(double, default: 0.0)
planner_frequency: 0.03333333333333333 # origin 1, now replan per 30s

# The rate in Hz at which to run the control loop and send velocity commands to the base.(double, default: 20.0)
controller_frequency: 10 #20.0

# How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed.(double, default: 5.0)
planner_patience: 5.0

# How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.(double, default: 15.0)
controller_patience: 3.0

# reeman wu di can shu
clear_number_every_layer_:  6

# Whether or not to enable the move_base recovery behaviors to attempt to clear out space.(bool, default: true)
recovery_behavior_enabled: true

# Determines whether or not the robot will attempt an in-place rotation when attempting to clear out space. Note: This parameter is only used when the default recovery behaviors are in use, meaning the user has not set the recovery_behaviors parameter to anything custom.(bool, default: true)
clearing_rotation_allowed: false

# Determines whether or not to shutdown the costmaps of the node when move_base is in an inactive state (bool, default: false)
shutdown_costmaps: false

# How long in seconds to allow for oscillation before executing recovery behaviors. A value of 0.0 corresponds to an infinite timeout. (double, default: 0.0)
oscillation_timeout: 20.0

# How far in meters the robot must move to be considered not to be oscillating. Moving this far resets the timer counting up to the ~oscillation_timeout (double, default: 0.5)
oscillation_distance: 1.0

# How many times to allow for planning retries before executing recovery behaviors. A value of -1.0 corresponds to an infinite retries.(int32_t, default: -1)
#max_planning_retries: -1

#############################
# plug for recovery_behaviors
#############################
costmap_reset_conservative:
  reset_distance: 0.3
  layer_names: ["obstacle_layer"]

again_costmap_reset_conservative:
  reset_distance: 0.3
  layer_names: ["obstacle_layer"]
