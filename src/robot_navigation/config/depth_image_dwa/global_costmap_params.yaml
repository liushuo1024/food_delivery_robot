global_costmap:
  global_frame: map #地图坐标系
  robot_base_frame: base_footprint #机器人坐标系
  # 以此实现坐标变换

  update_frequency: 1.0 #代价地图更新频率
  publish_frequency: 1.0 #代价地图的发布频率
  transform_tolerance: 0.5 #等待坐标变换发布信息的超时时间

  static_map: true # 是否使用一个地图或者地图服务器来初始化全局代价地图，如果不使用静态地图，这个参数为false.
#膨胀半径，扩展在碰撞区域以外的代价区域，使得机器人规划路径避开障碍物
  inflation_radius: 0.135
#代价比例系数，越大则代价值越小
  cost_scaling_factor: 3.0
  observation_sources: laser_scan camera_scan
#对传感器的坐标系和数据进行配置。这个也会用于代价地图添加和清除障碍物。例如，你可以用激光雷达传感器用于在代价地图添加障碍物，再添加kinect用于导航和清除障碍物。
  laser_scan: {sensor_frame: laser, data_type: LaserScan, topic: scan, marking: true, clearing: true}
  camera_scan: {sensor_frame: camera_link, data_type: LaserScan, topic: filter_scan, marking: true, clearing: true}

